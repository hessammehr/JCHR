// $ANTLR : "chr.g" -> "CHRParser.java"$

package compiler.parser;

public interface CHRTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int TYPECAST = 4;
	int METHODORCONSTRAINT = 5;
	int EMPTY = 6;
	int OPTION = 7;
	int LPAREN = 8;
	int LITERAL_debug = 9;
	int COMMA = 10;
	int RPAREN = 11;
	int SEMICOLON = 12;
	int STRING_LITERAL = 13;
	int NUM_INT = 14;
	int NUM_FLOAT = 15;
	int NUM_DOUBLE = 16;
	int TRUE = 17;
	int ON = 18;
	int FALSE = 19;
	int OFF = 20;
	int PACKAGE = 21;
	int IMPORT = 22;
	int HANDLER = 23;
	int SIMPLE_ID = 24;
	int LCURLY = 25;
	int RCURLY = 26;
	int EXTENDS = 27;
	int AMPERCENT = 28;
	int LT = 29;
	int GT = 30;
	int ID = 31;
	int PUBLIC = 32;
	int PROTECTED = 33;
	int PRIVATE = 34;
	int LOCAL = 35;
	int ON_DEMAND_ID = 36;
	int STATIC = 37;
	int SOLVER = 38;
	int EQ = 39;
	int INFIX = 40;
	int CONSTRAINT = 41;
	int LITERAL_constraints = 42;
	int FIXED = 43;
	int RULES = 44;
	int LITERAL_variable = 45;
	int VARIABLE = 46;
	int AT = 47;
	int MINUS = 48;
	int SIMP = 49;
	int PRAGMA = 50;
	int LITERAL_passive = 51;
	int LITERAL_no_history = 52;
	int PROP = 53;
	int DOUBLE_MINUS = 54;
	int VERTLINE = 55;
	int NUMBER_SIGN = 56;
	int FAIL = 57;
	int EQEQ = 58;
	int EQEQEQ = 59;
	int LEQ = 60;
	int QEL = 61;
	int GEQ = 62;
	int NEQ = 63;
	int NEQEQ = 64;
	int SINGLE_CHAR_LITERAL = 65;
	int MULTI_CHAR_LITERAL = 66;
	int NEW = 67;
	int AND = 68;
	int DOT = 69;
	int NUM_LONG = 70;
	int NULL = 71;
	int ELLIPSIS = 72;
	int STAR = 73;
	int WS = 74;
	int SL_COMMENT = 75;
	int ML_COMMENT = 76;
	int ESC = 77;
	int HEX_DIGIT = 78;
	int EXPONENT = 79;
	int FLOAT_SUFFIX = 80;
}
